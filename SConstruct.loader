# -*- mode: python; coding: utf-8; -*-
#
#  Codezero -- a microkernel for embedded systems.
#
#  Copyright Â© 2009  B Labs Ltd

import os, sys, shelve
from os.path import join

from config.configuration import *
from config.projpaths import *

config = configuration_retrieve()
arch = config.arch
platform = config.platform
gcc_cpu_flag = config.gcc_cpu_flag

variant = 'baremetal'

# Locally important paths are here
LIBC_PATH = 'loader/libs/c'
LIBC_LIBPATH = LIBC_PATH
LIBC_INCPATH = ['#' + join(LIBC_PATH, 'include'), \
                '#' + join(LIBC_PATH, 'include/arch/' + arch)]

LIBDEV_PATH = 'conts/libdev'
LIBDEV_LIBPATH = join(LIBDEV_PATH, 'uart')
LIBDEV_INCPATH = ['#' + join(LIBDEV_PATH, 'uart/include'),]

LIBELF_PATH = 'loader/libs/elf'
LIBELF_LIBPATH = LIBELF_PATH
LIBELF_INCPATH = '#' + join(LIBELF_PATH, 'include')

env = Environment(CC = config.kernel_toolchain + 'gcc',
		  # We don't use -nostdinc because sometimes we need standard headers,
		  # such as stdarg.h e.g. for variable args, as in printk().
		  CCFLAGS = ['-g', '-nostdlib', '-ffreestanding', '-std=gnu99', '-Wall', \
                     '-Werror', ('-mcpu=' + gcc_cpu_flag)],
		  LINKFLAGS = ['-nostdlib', '-T' + join(BUILDDIR, 'loader/linker.lds'), "-u_start"],
		  ASFLAGS = ['-D__ASSEMBLY__'],
		  PROGSUFFIX = '.elf',
		  ENV = {'PATH' : os.environ['PATH']},
		  LIBS = ['gcc', 'elf', 'libdev-baremetal', 'c-baremetal', 'gcc'],
          LIBPATH = [join('build', LIBELF_PATH), join('build', LIBDEV_PATH), join('build', LIBC_PATH)],
          CPPPATH = ['#include', LIBDEV_INCPATH, LIBC_INCPATH, LIBELF_INCPATH])

libdev = SConscript('conts/libdev/SConscript', \
                    exports = { 'env' : env, 'arch' : arch, 'platform' : platform, 'type' : variant}, \
                    duplicate = 0, variant_dir = 'build/conts/libdev')
libc = SConscript('loader/libs/c/SConscript', \
                  exports = { 'env' : env, 'arch' : arch, 'platform' : platform, 'type' : variant}, \
                  duplicate = 0, variant_dir = 'build/loader/libs/c')
libelf = SConscript('loader/libs/elf/SConscript', exports = { 'env' : env }, \
                    duplicate = 0, variant_dir = 'build/loader/libs/elf')

loader_objs = SConscript('loader/SConscript', exports = { 'env' : env }, \
                         duplicate = 0, variant_dir = 'build/loader')

final_elf = env.Program('build/final.elf', [libelf + libc + loader_objs])
Depends(loader_objs, libelf)
Depends(loader_objs, libc)
